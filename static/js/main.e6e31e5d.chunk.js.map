{"version":3,"sources":["utils.js","components/Loader.js","components/Apod.js","constants.js","components/DatePicker.js","components/Error.js","pages/MainPage.js","components/ApodPreview.js","components/ApodsList.js","components/ModalView.js","components/ExpanedApod.js","components/MonthPicker.js","components/YearPicker.js","pages/Catalog.js","App.js","index.js"],"names":["createISODate","year","month","day","formatDate","date","getFullYear","getMonth","getDate","getDatesRange","dates","today","Date","isCurrentMonth","push","Loader","className","Apod","imgUrl","title","description","hidden","onLoad","clsx","src","alt","monthNames","minDate","DatePicker","onChange","name","type","value","e","target","max","min","ErrorMsg","message","MainPage","useState","window","localStorage","getItem","setDate","apod","setApod","loading","setLoading","imgLoading","setImgLoading","error","setError","useEffect","setItem","fetch","process","then","response","ok","json","Error","data","media_type","catch","finally","exact","to","url","explanation","ApodPreview","onClick","ApodList","apods","map","c","key","ModalView","onDismiss","children","ExpanedApod","status","alert","hdurl","MonthPicker","onSelect","lastEnabled","indexOf","disabled","YearPicker","years","i","getYearsRange","Catalog","setApods","setMonth","setYear","setLastEnabled","pickedDate","setPickedDate","show","setShow","a","match","Promise","all","filter","x","App","basename","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6e31e5d.chunk.js","sourcesContent":["const createISODate = (year, month, day) =>  year + '-' + month + '-' + day\nconst isCurrentMonth = (month, year) => {\n    const today = new Date()\n    return month === today.getMonth() + 1 && year === today.getFullYear()\n}\n\nexport const formatDate = date => {\n    let year = date.getFullYear()\n    let month = date.getMonth() + 1\n    month = month < 10 ? '0' + month : month\n    let day = date.getDate()\n    day = day < 10 ? '0' + day : day\n\n    return createISODate(year, month, day)\n}\n\nexport const fetchApod = (date, callback) => {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${date}`).then(\n                response =>  response.json()\n            )\n            .then(apod => {\n                if(apod.url.match(/\\.(gif|jpe?g|png)$/)){\n                    callback(apod)\n                }\n                else{\n                    throw Error(\"No image\")\n                }\n            })\n}\nexport const isImage = url => {\n    return url.match(/\\.(gif|jpe?g|png)$/)\n}\n\nexport const getDatesRange = (month, year) =>{\n    const dates = []\n    let lastDay = isCurrentMonth(month, year) ? new Date().getDate() : new Date(year, month, 0).getDate()\n    for(let day = lastDay; day > 0; day--){\n        dates.push(createISODate(year, month, day))\n    }\n    return dates\n}\n\nexport const getYearsRange = (min, max) => {\n    const years = []\n    for(let i = min; i <= max; i++){\n        years.push(i)\n    }\n    return years\n}","import React from 'react'\nconst Loader = () => {\n    return(\n        <div className=\"loader\">\n                <div className=\"animation-container\">\n                <div className=\"animation-group\">\n                    <span className=\"loader-component\"></span>\n                    <span className=\"loader-component\"></span>\n                    <span className=\"loader-component\"></span>\n                    <span className=\"loader-component\"></span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Loader;","import React from 'react'\nimport clsx from 'clsx'\n\nconst Apod = ({imgUrl, title, description, hidden, onLoad}) => {\n    return(\n            <div className={clsx(\"apod-container\", {\"hidden\": hidden})}>\n                <header>\n                    <h2 className=\"title\">{title}</h2>  \n                </header>\n                <div className=\"picture-container\">\n                    <img \n                        src={imgUrl} \n                        alt={title} \n                        className=\"picture\" \n                        onLoad={onLoad}\n                        />\n                    <div className=\"description-container\">\n                        <p>\n                            {description}\n                        </p>\n                    </div>\n                </div>         \n            </div>\n    )  \n}\n\nexport default Apod","export const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\nexport const minDate = {year: \"1995\", month: \"6\", day: \"16\"}\n","import React from 'react'\nimport { formatDate } from '../utils'\nimport { minDate } from '../constants'\n\nconst DatePicker = ({date, onChange}) => {\n    const handleChange = e => onChange(e.target.value)\n    \n    return(    \n            <input \n                name=\"picker\" \n                className=\"picker date-picker\"\n                type=\"date\" \n                value={date} \n                onChange={handleChange} \n                max={formatDate(new Date())} \n                min={formatDate(new Date(minDate.year, minDate.month, minDate.day))}\n                />\n        \n    )\n}\n\nexport default DatePicker","import React from 'react'\nconst ErrorMsg = ({message}) => {\n    return(\n    <div className=\"card\">\n        <span >{message}</span>\n        <span className=\"error\"></span>\n    </div>)\n}\n\nexport default ErrorMsg","import React, { useState, useEffect } from 'react'\nimport { formatDate } from '../utils';\nimport Loader from '../components/Loader';\nimport Apod from '../components/Apod';\nimport DatePicker from '../components/DatePicker';\nimport ErrorMsg from '../components/Error';\nimport { NavLink } from 'react-router-dom';\n\n\nconst MainPage = () => {\n  const initialDate = () => window.localStorage.getItem(\"date\") || formatDate(new Date());\n\n  const [date, setDate] = useState(initialDate)\n  const [apod, setApod] = useState(null)\n\n  const [loading, setLoading] = useState(true)\n  const [imgLoading, setImgLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => window.localStorage.setItem(\"date\", date), [date]);\n  \n  useEffect(() => {\n    setLoading(true)\n    setImgLoading(true)\n    setError(null)\n\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${date}`)\n        .then(response => {\n            if(response.ok){\n                return response.json()\n            }else{\n                throw new Error(\"Invalid date.\")\n            }\n        })\n        .then((data) => {\n            if(data.media_type !== \"image\"){\n                throw new Error(\"Oops. The day has no image.\")\n            }\n            setApod(data)\n        })\n        .catch((e) => {\n            setError(e)\n            setImgLoading(false)\n        })\n        .finally(() => setLoading(false))\n}, [date])\n\n  return (\n    <>\n        <header className=\"section-header\">\n            <h1 className=\"section-title\">Astronomy Picture of the Day</h1>\n            <NavLink className=\"nav-link\" exact to='/catalog'>Go to catalog</NavLink>\n        </header>\n        <div className=\"picker-container\">\n            <DatePicker date={date} onChange={setDate}/>\n        </div>\n        {imgLoading && <Loader/>}\n        {!loading && !error && \n            <Apod \n                imgUrl={apod.url} \n                title={apod.title} \n                description={apod.explanation} \n                hidden={imgLoading}\n                onLoad={() => setImgLoading(false)}/> }\n        {error && <ErrorMsg message={error.message}/>}\n    </>)\n}\n\nexport default MainPage\n","import React, { useState } from 'react'\nimport Loader from './Loader'\nimport clsx from 'clsx'\n\nexport const ApodPreview = ({imgUrl, date, title, onClick}) => {\n    const [loading, setLoading] = useState(true)\n    return(\n        <div className=\"preview\" onClick={onClick}>\n                {loading && <Loader/>}\n                <img \n                    className={clsx(\"preview-img\", {\"hidden\": loading})} \n                    src={imgUrl} \n                    alt={title} \n                    onLoad={() => setLoading(false)}\n                    />\n                <span className=\"preview-title\">{title}</span>\n                <span className=\"preview-date\">{date}</span>    \n        </div>\n    )\n}","import React from 'react'\nimport { ApodPreview } from './ApodPreview'\n\nexport const ApodList= ({apods, onClick}) => {\n    return(\n        <div className=\"apods-list\">\n            {apods.map(c => \n            <ApodPreview \n                imgUrl={c.url} \n                title={c.title} \n                date={c.date} \n                key={c.date} \n                onClick={() => onClick(c.date)}\n            />)}\n        </div>\n    )\n}","import React from 'react'\n\nconst ModalView = ({onDismiss, children}) => {\n    return(\n        <div className=\"window\" onClick={onDismiss}>\n                    {children}\n        </div>\n    )\n}\n\nexport default ModalView","import React, { useState, useEffect } from 'react'\nimport ModalView from './ModalView'\nimport clsx from 'clsx'\nimport Loader from './Loader'\n\nconst ExpanedApod = ({date, onDismiss}) => {\n    const [apod, setApod] = useState(null)\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${date}&hd=true`)\n            .then(response => {\n                if(response.status === 200){\n                    return response.json()\n                }else{\n                    throw Error()\n                }\n            })\n            .then(setApod)\n            .catch(() => alert(\"Something went wrong. Try to pick another date.\"))\n        },[date])\n\n    return(\n        <ModalView onDismiss={onDismiss}>\n            {loading && <Loader/>}\n            {apod && <img \n\n                    src={apod.hdurl} \n                    alt={apod.title} \n                    className={clsx(\"modal-image\", {\"hidden\" : loading}, {\"appearing\": !loading})}\n                    onLoad={() => setLoading(false)}\n                    />\n                }\n        </ModalView>\n    )\n}\n\nexport default ExpanedApod","import React from 'react'\nimport { monthNames } from '../constants'\n\nconst MonthPicker = ({value, onSelect, lastEnabled}) => {\n    \n    return(\n        <select value={value} onChange={e => onSelect(e.target.value)} className=\"picker\">\n            {monthNames.map(\n                name => <option \n                            value={monthNames.indexOf(name) + 1} \n                            key={name}\n                            disabled={monthNames.indexOf(name) + 1 > lastEnabled}\n                            >{name}\n                        </option>)}\n        </select>\n    )  \n}\n\nexport default MonthPicker","import React from 'react'\nimport { getYearsRange } from '../utils'\nimport { minDate } from '../constants'\n\nconst YearPicker = ({value, onSelect}) => {\n    const years = getYearsRange(minDate.year, new Date().getFullYear())\n\n    return(\n        <select value={value} onChange={e => onSelect(+e.target.value)} className=\"picker\">\n            {years.map(i => <option value={i} key={i}>{i}</option>)}\n        </select>\n    )   \n}\n\nexport default YearPicker","import React, { useState, useEffect } from 'react'\nimport { ApodList } from '../components/ApodsList';\nimport Loader from '../components/Loader';\nimport { getDatesRange, isImage } from '../utils';\nimport ExpanedApod from '../components/ExpanedApod';\nimport MonthPicker from '../components/MonthPicker';\nimport YearPicker from '../components/YearPicker';\nimport { NavLink } from 'react-router-dom';\n\n\nconst Catalog = () => {\n    const initMonth = () => window.localStorage.getItem(\"month\") || new Date().getMonth() + 1;\n    const initYear = () => window.localStorage.getItem(\"year\") || new Date().getFullYear();\n\n    const [apods, setApods] = useState(null)\n    const [loading, setLoading] = useState(true)\n\n    const [month, setMonth] = useState(initMonth)\n    const [year, setYear] = useState(initYear)\n    const [lastEnabled, setLastEnabled] = useState(12)\n\n    const [pickedDate, setPickedDate] = useState(null)\n    const [show, setShow] = useState(false)\n\n    useEffect(() => {\n        if(year === new Date().getFullYear()){\n            setLastEnabled(new Date().getMonth() + 1)\n        }\n        else{\n            setLastEnabled(12)\n        }\n        const dates = getDatesRange(month, year)\n        const data = dates.map(async date => {\n            const response = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${date}`);\n            if(response.status !== 200){\n                return null\n            }\n            const apod = await response.json();\n            if (!isImage(apod.url)) {\n                return null\n            }\n            return apod\n        })\n        Promise.all(data).then(data => setApods(data.filter(x => !!x))).then(() => setLoading(false))\n    }, [month, year])\n\n    const handleClick = date => {\n        setPickedDate(date)\n        setShow(true)\n    }\n\n  return (\n      <>\n        <header className=\"section-header\">\n            <h1 className=\"section-title\">APoD catalog</h1>\n            <NavLink className=\"nav-link\" exact to='/'>Return to apod</NavLink>\n        </header>\n        <div className=\"picker-container\">\n            <MonthPicker value={month} onSelect={setMonth} lastEnabled={lastEnabled}/>\n            <YearPicker value={year} onSelect={setYear}/>\n        </div>\n        {loading? <Loader/> : <ApodList apods={apods} onClick={handleClick}/>}\n        {show && <ExpanedApod date={pickedDate} onDismiss={() => setShow(false)}/>}\n      </>\n  );\n}\n\nexport default Catalog\n","import React from 'react'\nimport MainPage from './pages/MainPage';\nimport { Switch, Route,  HashRouter as Router } from 'react-router-dom';\nimport Catalog from './pages/Catalog';\n\n\nconst App = () => {\n  return (\n    <Router basename='/'>\n      <div className=\"container\">\n            <section className=\"main-section\">\n            <Switch>\n                <Route path='/catalog' component={Catalog}/>\n                <Route exact path='/' component={MainPage}/>\n            </Switch>\n            </section>\n        </div>\n      </Router>\n    \n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}